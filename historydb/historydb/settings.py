"""
Django settings for historydb project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os, json

django_key_file = os.path.join(BASE_DIR, 'django_keys.json')
with open(django_key_file, "r") as f_in:
    django_keys = json.loads(f_in.read())
def get_django_key(setting, django_keys=django_keys):
    return django_keys[setting]

SECRET_KEY = get_django_key("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# SECURITY WARNING: keep the email data credential (i.e. not open the email data file to public Github)

email_setting_file = os.path.join(BASE_DIR, 'email_settings.json')
def get_email_setting_data(setting):
    try:
        with open(email_setting_file, "r") as f_in:
            email_setting_data = json.loads(f_in.read())
            data = email_setting_data[setting]
            if data == "yes":
                return True
            else:
                return data
    except:
        return ""

EMAIL_BACKEND = get_email_setting_data("EMAIL_BACKEND")
EMAIL_USE_TLS = get_email_setting_data("EMAIL_USE_TLS")
EMAIL_PORT = get_email_setting_data("EMAIL_PORT")
EMAIL_HOST = get_email_setting_data("EMAIL_HOST")
EMAIL_HOST_USER = get_email_setting_data("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = get_email_setting_data("EMAIL_HOST_PASSWORD")
SERVER_EMAIL = get_email_setting_data("SERVER_EMAIL")
EMAILING_BCC = get_email_setting_data("EMAILING_BCC")
EMAILING_REPLY_TO = get_email_setting_data("EMAILING_REPLY_TO")

google_recaptcha_setting_file = os.path.join(BASE_DIR, 'google_recaptcha_keys.json')
def get_google_recaptcha_setting_data(setting):
    try:
        with open(google_recaptcha_setting_file, "r") as f_in:
            google_recaptcha_setting_data = json.loads(f_in.read())
            data = google_recaptcha_setting_data[setting]
            if data == "yes":
                return True
            else:
                return data
    except:
        return ""

GOOGLE_RECAPTCHA_SITE_KEY = get_google_recaptcha_setting_data("SITE_KEY")
GOOGLE_RECAPTCHA_SECRET_KEY = get_google_recaptcha_setting_data("SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'documentation.apps.DocumentationConfig',
    'repo.apps.RepoConfig',
    'account.apps.AccountConfig',
    'main.apps.MainConfig',
    'docs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'historydb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'historydb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.environ['HISTORYDB_SQLITE_DATA'] + '/' + 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_ROOT = os.path.join(Path(__file__).resolve().parent.parent.parent, "media")

#DOCS_ROOT = os.environ['HISTORYDB_DOCS_ROOT']
